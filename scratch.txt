    if ($lit.ctx->decLiteral() && $lit.ctx->decLiteral()->DEC_DIGITS()) {

    } else if ($lit.ctx->decLiteral() && $lit.ctx->decLiteral()->DEC_DIGITS_UNDERSCORE()) {
      std::string temp;
      std::string literal = $lit.ctx->decLiteral()->DEC_DIGITS_UNDERSCORE()->getText();
      temp.reserve(literal.size());
      for (auto c : literal) {
        if (c != '_') {
          temp += c;
        }
      }
      std::string_view t = temp;
      uint32_t value;
      auto result = std::from_chars(t.begin(), t.end(), value, 10);
      bool ended_early = result.ptr != t.end();
      if (result.ec == std::errc() && !ended_early) {
        $maybe_val = value;
      } else {
        throw InputMismatchException(this);
      }
    } else if ($lit.ctx->hexLiteral() && $lit.ctx->hexLiteral()->HEX_DIGITS()) {

    } else if ($lit.ctx->hexLiteral() && $lit.ctx->hexLiteral()->HEX_DIGITS_UNDERSCORE()) {

    } else if ($lit.ctx->octLiteral() && $lit.ctx->octLiteral()->OCT_DIGITS()) {

    } else if ($lit.ctx->octLiteral() && $lit.ctx->octLiteral()->OCT_DIGITS_UNDERSCORE()) {

    } else if ($lit.ctx->binLiteral() && $lit.ctx->binLiteral()->BIN_DIGITS()) {

    } else if ($lit.ctx->binLiteral() && $lit.ctx->binLiteral()->BIN_DIGITS_UNDERSCORE()) {

    }