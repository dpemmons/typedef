
#include "template_example.td.h"

// Generated by the Typedef compiler

#include <string>
#include <sstream>
#include <locale>
#include <codecvt>
#include <iomanip>
// JSON parser required headers
#include "rapidjson/document.h"
#include <charconv>
#include <iomanip>
#include <locale>
// JSON writer required headers
#include <charconv>
#include <iomanip>
#include <locale>


namespace {

std::string escape_char32_t_as_literal(char32_t c) {
  switch (c) {
    case U'\a':
      return R"(U'\a')";
    case U'\b':
      return R"(U'\b')";
    case U'\f':
      return R"(U'\f')";
    case U'\n':
      return R"(U'\n')";
    case U'\r':
      return R"(U'\r')";
    case U'\t':
      return R"(U'\t')";
    case U'\v':
      return R"(U'\v')";
    case U'\'':
      return R"(U'\'')";
    case U'\"':
      return R"(U'\"')";
    case U'\\':
      return R"(U'\\')";
    default:
      if (c < 32 || c >= 0x7F) {
        // For characters outside of the ASCII range
        std::ostringstream oss;
        oss << "U'\\U" << std::setw(8) << std::setfill('0') << std::hex
            << std::uppercase << static_cast<int>(c) << "'";
        return oss.str();
      } else {
        // For all other characters, return as is
        return "U'" + std::string(1, static_cast<char>(c)) + "'";
      }
  }
}

template <typename T>
inline bool IsEmpty(const std::vector<T>& v) {
  return v.size() == 0;
}


inline std::string escape_json(const std::string& s) {
  std::ostringstream o;
  for (auto c = s.cbegin(); c != s.cend(); c++) {
    switch (*c) {
      case '"': o << "\\\""; break;
      case '\\': o << "\\\\"; break;
      case '\b': o << "\\b"; break;
      case '\f': o << "\\f"; break;
      case '\n': o << "\\n"; break;
      case '\r': o << "\\r"; break;
      case '\t': o << "\\t"; break;
      default:
        if ('\x00' <= *c && *c <= '\x1f') {
          o << "\\u" << std::hex << std::setw(4) << std::setfill('0')
            << static_cast<int>(*c);
        } else {
          o << *c;
        }
    }
  }
  return o.str();
}

inline std::string char32ToJsonString(char32_t c) {
  std::wstring_convert<std::codecvt_utf8<char32_t>, char32_t> converter;
  std::string utf8 = converter.to_bytes(&c, &c + 1);
  return escape_json(utf8);
}

// This is a very inefficint way of doing this, but
// C++17 standard libs don't give us great options.
// TODO: Also it may not work in C++20?
std::u32string decode_utf8(const std::string& utf8_string) {
  struct destructible_codecvt : public std::codecvt<char32_t, char, std::mbstate_t> {
    using std::codecvt<char32_t, char, std::mbstate_t>::codecvt;
    ~destructible_codecvt() = default;
  };
  std::wstring_convert<destructible_codecvt, char32_t> utf32_converter;
  return utf32_converter.from_bytes(utf8_string);
}

inline char32_t GetCharValue(std::string_view str) {
  if (str.size() == 2 && str[0] == '\\') {
    switch (str[1]) {
      case 'n':
        return U'\n';
      case 'r':
        return U'\r';
      case 't':
        return U'\t';
      case '\\':
        return U'\\';
      case '0':
        return U'\0';
      case '\'':
        return U'\'';
      case '\"':
        return U'\"';
    }
  }
  if (str.size() == 4 && str[0] == '\\' && str[1] == 'x') {
    // TODO this seems rather inefficient, do something better?
    std::istringstream ss(std::string(str.substr(2)));
    int value;
    ss >> std::hex >> value;
    return static_cast<char32_t>(value);
  }

  if (str.size() >= 3 && str.size() <= 10 && str[0] == '\\' && str[1] == 'u' &&
      str[2] == '{' && str.back() == '}') {
    // TODO this seems rather inefficient, do something better?
    std::istringstream ss(std::string(str.substr(3, str.size() - 4)));
    int value;
    ss >> std::hex >> value;
    return static_cast<char32_t>(value);
  }

  if (str.size() > 0) {
    std::string inner_str(str);
    std::u32string str32 = decode_utf8(inner_str);
    if (str32.size() == 1) {
      return str32[0];
    }
  }
  throw std::runtime_error("JSON format error: expected 'char'.");
}


bool JsonParseBool(const rapidjson::GenericValue<rapidjson::UTF8<>>& val) {
  if (val.IsBool()) {
    return val.GetBool();
  } else {
    throw std::runtime_error("JSON format error: expected 'bool'.");
  }
}
char32_t JsonParseChar(const rapidjson::GenericValue<rapidjson::UTF8<>>& val) {
  if (val.IsString()) {
    std::string str(val.GetString(), val.GetStringLength());
    return GetCharValue(str);
  } else {
    throw std::runtime_error("JSON format error: expected 'string'.");
  }
}
std::string JsonParseStr(const rapidjson::GenericValue<rapidjson::UTF8<>>& val) {
  if (val.IsString()) {
    return val.GetString();
  } else {
    throw std::runtime_error("JSON format error: expected 'string'.");
  }
}
float JsonParseF32(const rapidjson::GenericValue<rapidjson::UTF8<>>& val) {
  if (val.IsDouble()) {
    return (float)val.GetDouble();
  } else {
    throw std::runtime_error("JSON format error: expected 'float'.");
  }
}
double JsonParseF64(const rapidjson::GenericValue<rapidjson::UTF8<>>& val) {
  if (val.IsDouble()) {
    return val.GetDouble();
  } else {
    throw std::runtime_error("JSON format error: expected 'double'.");
  }
}
std::uint8_t JsonParseU8(const rapidjson::GenericValue<rapidjson::UTF8<>>& val) {
  if (val.IsUint()) {
    unsigned int ui = val.GetUint();
    if (ui > std::numeric_limits<std::uint8_t>::max() ||
        ui < std::numeric_limits<std::uint8_t>::min()) {
      throw std::runtime_error("JSON format error: unsigned integer '" +
                               std::to_string(ui) +
                               "' exceeded 'u8' capacity.");
    }
    return (std::uint8_t)ui;
  } else {
    throw std::runtime_error("JSON format error: expected 'unsigned integer'.");
  }
}
std::uint16_t JsonParseU16(const rapidjson::GenericValue<rapidjson::UTF8<>>& val) {
  if (val.IsUint()) {
    unsigned int ui = val.GetUint();
    if (ui > std::numeric_limits<std::uint16_t>::max() ||
        ui < std::numeric_limits<std::uint16_t>::min()) {
      throw std::runtime_error("JSON format error: unsigned integer '" +
                               std::to_string(ui) +
                               "' exceeded 'u16' capacity.");
    }
    return (std::uint16_t)ui;
  } else {
    throw std::runtime_error("JSON format error: expected 'unsigned integer'.");
  }
}
std::uint32_t JsonParseU32(const rapidjson::GenericValue<rapidjson::UTF8<>>& val) {
  if (val.IsUint()) {
    return val.GetUint();
  } else {
    throw std::runtime_error("JSON format error: expected 'unsigned integer'.");
  }
}
std::uint64_t JsonParseU64(const rapidjson::GenericValue<rapidjson::UTF8<>>& val) {
  if (val.IsUint64()) {
    return val.GetUint64();
  } else {
    throw std::runtime_error("JSON format error: expected 'unsigned integer'.");
  }
}
std::int8_t JsonParseI8(const rapidjson::GenericValue<rapidjson::UTF8<>>& val) {
  if (val.IsInt()) {
    int ui = val.GetInt();
    if (ui > std::numeric_limits<std::int8_t>::max() ||
        ui < std::numeric_limits<std::int8_t>::min()) {
      throw std::runtime_error("JSON format error: integer '" +
                               std::to_string(ui) +
                               "' exceeded 'i8' capacity.");
    }
    return (std::int8_t)ui;
  } else {
    throw std::runtime_error("JSON format error: expected 'integer'.");
  }
}
std::int16_t JsonParseI16(const rapidjson::GenericValue<rapidjson::UTF8<>>& val) {
  if (val.IsInt()) {
    int ui = val.GetInt();
    if (ui > std::numeric_limits<std::int16_t>::max() ||
        ui < std::numeric_limits<std::int16_t>::min()) {
      throw std::runtime_error("JSON format error: integer '" +
                               std::to_string(ui) +
                               "' exceeded 'i16' capacity.");
    }
    return (std::int16_t)ui;
  } else {
    throw std::runtime_error("JSON format error: expected 'integer'.");
  }
}
std::int32_t JsonParseI32(const rapidjson::GenericValue<rapidjson::UTF8<>>& val) {
  if (val.IsInt()) {
    return val.GetInt();
  } else {
    throw std::runtime_error("JSON format error: expected 'integer'.");
  }
}
std::int64_t JsonParseI64(const rapidjson::GenericValue<rapidjson::UTF8<>>& val) {
  if (val.IsInt64()) {
    return val.GetInt64();
  } else {
    throw std::runtime_error("JSON format error: expected 'integer'.");
  }
}
template <typename T>
T GetIntFromString(const rapidjson::GenericValue<rapidjson::UTF8<>>& val) {
  if (!val.IsString()) {
    throw std::runtime_error("JSON format error: expected 'string'.");
  }
  std::string digits = val.GetString();
  std::string_view digits_view(digits);
  T value{};
  auto result = std::from_chars(digits_view.begin(), digits_view.end(), value);
  bool ended_early = result.ptr != digits_view.end();
  if (result.ec == std::errc() && !ended_early) {
    return value;
  } else if (result.ec == std::errc::invalid_argument) {
    throw std::runtime_error(
        "JSON format error: expected string encoded integer.");
  } else if (result.ec == std::errc::result_out_of_range) {
    throw std::runtime_error("JSON format error: number out of range.");
  } else {
    throw std::runtime_error(
        "JSON format error: expected string encoded integer.");
  }
}
bool GetBoolFromString(const rapidjson::GenericValue<rapidjson::UTF8<>>& val) {
  if (!val.IsString()) {
    throw std::runtime_error("JSON format error: expected 'string'.");
  }
  std::string maybe_bool_str = val.GetString();
  if (maybe_bool_str == "true") {
    return true;
  } else if (maybe_bool_str == "false") {
    return false;
  } else {
    throw std::runtime_error(
        "JSON format error: expected string encoded bool 'true' or 'false'.");
  }
}

// Struct and variant JSON forward declarations

template_example::StructC JsonParseStructC(const rapidjson::Value& obj);

template_example::TemplateData JsonParseTemplateData(const rapidjson::Value& obj);

template_example::SomeVariant JsonParseSomeVariant(const rapidjson::Value& obj);

// Struct and variant JSON definitions

template_example::StructC JsonParseStructC(const rapidjson::Value& val) {
  if (!val.IsObject()) {
    throw std::runtime_error("JSON format error: expected 'object'.");
  }
  template_example::StructC ret;
  {
  auto obj = val.GetObject();
  rapidjson::Value::ConstMemberIterator iter = obj.FindMember("asdf");
  if (iter != obj.MemberEnd()) {
    auto& val = iter->value;
    
    if (val.IsObject()) {
      ret.asdf() = JsonParseTemplateData(val);
    } else {
      throw std::runtime_error("JSON format error: expected 'object'.");
    }
  }
  } {
  auto obj = val.GetObject();
  rapidjson::Value::ConstMemberIterator iter = obj.FindMember("zxcv");
  if (iter != obj.MemberEnd()) {
    auto& val = iter->value;
    ret.zxcv() = JsonParseI32(val);
  }
  } {
  auto obj = val.GetObject();
  rapidjson::Value::ConstMemberIterator iter = obj.FindMember("jkl");
  if (iter != obj.MemberEnd()) {
    auto& val = iter->value;
    ret.jkl() = JsonParseI32(val);
  }
  } 
  return ret;
}


template_example::TemplateData JsonParseTemplateData(const rapidjson::Value& val) {
  if (!val.IsObject()) {
    throw std::runtime_error("JSON format error: expected 'object'.");
  }
  template_example::TemplateData ret;
  {
  auto obj = val.GetObject();
  rapidjson::Value::ConstMemberIterator iter = obj.FindMember("name");
  if (iter != obj.MemberEnd()) {
    auto& val = iter->value;
    ret.name() = JsonParseStr(val);
  }
  } {
  auto obj = val.GetObject();
  rapidjson::Value::ConstMemberIterator iter = obj.FindMember("has_name");
  if (iter != obj.MemberEnd()) {
    auto& val = iter->value;
    ret.has_name() = JsonParseBool(val);
  }
  } {
  auto obj = val.GetObject();
  rapidjson::Value::ConstMemberIterator iter = obj.FindMember("name2");
  if (iter != obj.MemberEnd()) {
    auto& val = iter->value;
    ret.name2() = JsonParseStr(val);
  }
  } {
  auto obj = val.GetObject();
  rapidjson::Value::ConstMemberIterator iter = obj.FindMember("has_name2");
  if (iter != obj.MemberEnd()) {
    auto& val = iter->value;
    ret.has_name2() = JsonParseBool(val);
  }
  } {
  auto obj = val.GetObject();
  rapidjson::Value::ConstMemberIterator iter = obj.FindMember("someVec");
  if (iter != obj.MemberEnd()) {
    auto& val = iter->value;
    
    if (val.IsArray()) {
      
auto json_parse_array_lambda = [](auto& value_type, const rapidjson::Value& src) {
  using VectorType = std::remove_reference_t<decltype(value_type)>;
  VectorType vec;
  for (rapidjson::SizeType ii = 0; ii < src.Size(); ii++) {
    vec.push_back(JsonParseI32(src[ii]));
  }
  return vec;
};

      ret.someVec() = json_parse_array_lambda(ret.someVec(), val);
    } else {
      throw std::runtime_error("JSON format error: expected 'array'.");
    }
  }
  } {
  auto obj = val.GetObject();
  rapidjson::Value::ConstMemberIterator iter = obj.FindMember("someMap");
  if (iter != obj.MemberEnd()) {
    auto& val = iter->value;
    
    if (val.IsObject()) {
      
auto json_parse_map_lambda = [](auto& value_type, const rapidjson::Value& src) {
  using MapType = std::remove_reference_t<decltype(value_type)>;
  MapType map;
  using KeyType = typename MapType::key_type;
  using ValType = typename MapType::mapped_type;
  using PairType = std::pair<const KeyType, ValType>;
  for (auto& m : src.GetObject()) {
    KeyType key = JsonParseStr(m.name);

    ValType map_val = JsonParseStr(m.value);

    map.emplace(std::make_pair(key, std::move(map_val)));
  }
  return map;
};

      ret.someMap() = json_parse_map_lambda(ret.someMap(), val);
    } else {
      throw std::runtime_error("JSON format error: expected 'object'.");
    }
    
  }
  } {
  auto obj = val.GetObject();
  rapidjson::Value::ConstMemberIterator iter = obj.FindMember("structC");
  if (iter != obj.MemberEnd()) {
    auto& val = iter->value;
    
    if (val.IsObject()) {
      ret.structC() = JsonParseStructC(val);
    } else {
      throw std::runtime_error("JSON format error: expected 'object'.");
    }
  }
  } 
  return ret;
}


template_example::SomeVariant JsonParseSomeVariant(const rapidjson::Value& val) {
  if (!val.IsObject()) {
    throw std::runtime_error("JSON format error: expected 'object'.");
  }
  template_example::SomeVariant ret;
  {
  auto obj = val.GetObject();
  rapidjson::Value::ConstMemberIterator iter = obj.FindMember("a_string");
  if (iter != obj.MemberEnd()) {
    auto& val = iter->value;
    ret.a_string() = JsonParseStr(val);
  }
  } {
  auto obj = val.GetObject();
  rapidjson::Value::ConstMemberIterator iter = obj.FindMember("b_int");
  if (iter != obj.MemberEnd()) {
    auto& val = iter->value;
    ret.b_int() = JsonParseI32(val);
  }
  } {
  auto obj = val.GetObject();
  rapidjson::Value::ConstMemberIterator iter = obj.FindMember("c_char");
  if (iter != obj.MemberEnd()) {
    auto& val = iter->value;
    ret.c_char() = JsonParseChar(val);
  }
  } {
  auto obj = val.GetObject();
  rapidjson::Value::ConstMemberIterator iter = obj.FindMember("d_struct");
  if (iter != obj.MemberEnd()) {
    auto& val = iter->value;
    
    if (val.IsObject()) {
      ret.d_struct() = JsonParseStructC(val);
    } else {
      throw std::runtime_error("JSON format error: expected 'object'.");
    }
  }
  } 
  return ret;
}


}

namespace template_example {

// Struct and variant definitions

// StructC member definitions

// TemplateData member definitions

// template_example::SomeVariant member definitions

// Struct and variant JSON declarations

std::string ToJson(const StructC& from) {
  std::stringstream ss;
  ToJson(ss, from);
  return ss.str();
}
void ToJson(std::ostream& os, const StructC& from) {
  os << "{";
  
if (from.has_asdf()) {os << "\"asdf\":"; ToJson(os, from.asdf());} else {os << "\"asdf\":"; os << "null";}
os << ",";
os << "\"zxcv\":"; os << from.zxcv();
os << ",";
os << "\"jkl\":"; os << from.jkl();

  os << "}";
}

StructC StructC::FromJson(const std::string& str) {
  rapidjson::Document doc;
  doc.Parse(str.c_str());
  return JsonParseStructC(doc);
}


std::string ToJson(const TemplateData& from) {
  std::stringstream ss;
  ToJson(ss, from);
  return ss.str();
}
void ToJson(std::ostream& os, const TemplateData& from) {
  os << "{";
  
os << "\"name\":"; os << "\"" << escape_json(from.name()) << "\"";
os << ",";
os << "\"has_name\":"; os << (from.has_name() ? "true" : "false");
os << ",";
os << "\"name2\":"; os << "\"" << escape_json(from.name2()) << "\"";
os << ",";
os << "\"has_name2\":"; os << (from.has_name2() ? "true" : "false");
os << ",";
os << "\"someVec\":";
{
  auto& arr = from.someVec();
  
os << "[";
for (size_t ii = 0; ii < arr.size(); ii++) {
  const auto& val = arr[ii];
  os << val;
  if (ii < arr.size() - 1) { os << ","; }
}
os << "]";

}
os << ",";
os << "\"someMap\":";
{
  auto& map = from.someMap();
  
os << "{";
auto iter = map.begin();
while (iter != map.end()) {
  {
  const auto& key = iter->first;
  os << "\"" << escape_json(key) << "\"";
  }
  os << ":";
  {
  const auto& val = iter->second;
  os << "\"" << escape_json(val) << "\"";
  }
  ++iter;
  if (iter != map.end()) { os << ","; }
}
os << "}";

}
os << ",";
if (from.has_structC()) {os << "\"structC\":"; ToJson(os, from.structC());} else {os << "\"structC\":"; os << "null";}

  os << "}";
}

TemplateData TemplateData::FromJson(const std::string& str) {
  rapidjson::Document doc;
  doc.Parse(str.c_str());
  return JsonParseTemplateData(doc);
}


std::string ToJson(const SomeVariant& from) {
  std::stringstream ss;
  ToJson(ss, from);
  return ss.str();
}
void ToJson(std::ostream& os, const SomeVariant& from) {
  os << "{";
  
  if (from.is_a_string()) {
    
os << "\"a_string\":"; os << "\"" << escape_json(from.a_string()) << "\"";

  }
  
  if (from.is_b_int()) {
    
os << "\"b_int\":"; os << from.b_int();

  }
  
  if (from.is_c_char()) {
    
os << "\"c_char\":"; os << "\"" << char32ToJsonString(from.c_char()) << "\"";

  }
  
  if (from.is_d_struct()) {
    
if (from.has_d_struct()) {os << "\"d_struct\":"; ToJson(os, from.d_struct());} else {os << "\"d_struct\":"; os << "null";}

  }
  
  os << "}";
}


SomeVariant SomeVariant::FromJson(const std::string& str) {
  rapidjson::Document doc;
  doc.Parse(str.c_str());
  return JsonParseSomeVariant(doc);
}


// Tmplate function definitions

void PrintStructC(std::ostream& os, const StructC& sc) {
os << "\nStructC contains:\nzxcv: ";
os << sc.zxcv();
os << "\njkl: ";
os << sc.jkl();
os << "\n";

}
std::string PrintStructC(const StructC& sc) {
  std::stringstream oss;
  PrintStructC(oss, sc);
  return oss.str();
}
void PrintTemplateData(std::ostream& os, const TemplateData& t) {
os << "\n  Print either name or name2, or neither:\n  ";
if (t.has_name()) {
os << "name: ";
os << t.name();
os << "\n  ";
} else if (t.has_name2()) {
os << "name2: ";
os << t.name2();
os << "\n  ";
} else {
os << "neither name or name2.\n  ";
}
os << "\n\n  Iterate over a vector:\n  ";


for (size_t td_iter_ = 0; td_iter_ < t.someVec().size(); td_iter_++) {
  auto& i = t.someVec()[td_iter_];
  auto IsFirst = [&]() { return td_iter_ == 0; };
  auto IsLast = [&]() { return td_iter_ == t.someVec().size() - 1; };
  auto Index0 = [&](std::ostream& os) { os << std::to_string(td_iter_); };
  auto Index1 = [&](std::ostream& os) { os << std::to_string(td_iter_ + 1); };
os << "for value number: ";
os << i;
os << "\n  ";
}

os << "\n\n  Iterate over an unordered map:\n  ";


for (auto const& [key, val] : t.someMap()) {
os << key;
os << " -> ";
os << val;
os << "\n  ";
}

os << "\n  \n  Call another string template \"PrintStructC\":\n  ";
PrintStructC(os, t.structC());
os << "\n";

}
std::string PrintTemplateData(const TemplateData& t) {
  std::stringstream oss;
  PrintTemplateData(oss, t);
  return oss.str();
}
void DoSomeVariant(std::ostream& os, const SomeVariant& v) {
os << "\n  Switch statement example:\n  ";
// Switch v

if (v.is_a_string()) {
os << "It's a string: ";
os << v.a_string();
} else 
if (v.is_b_int()) {
os << "It's an int: ";
os << v.b_int();
} else 
if (v.is_d_struct()) {
os << "It's a struct: ";
PrintStructC(os, v.d_struct());
} else  {
os << "It's the default!";
}
os << "\n";

}
std::string DoSomeVariant(const SomeVariant& v) {
  std::stringstream oss;
  DoSomeVariant(oss, v);
  return oss.str();
}
void LoopLogic(std::ostream& os, const std::vector<std::string>& v) {
os << "\n  LoopLogic:\n  ";


for (size_t td_iter_ = 0; td_iter_ < v.size(); td_iter_++) {
  auto& i = v[td_iter_];
  auto IsFirst = [&]() { return td_iter_ == 0; };
  auto IsLast = [&]() { return td_iter_ == v.size() - 1; };
  auto Index0 = [&](std::ostream& os) { os << std::to_string(td_iter_); };
  auto Index1 = [&](std::ostream& os) { os << std::to_string(td_iter_ + 1); };
os << "\n  ";
if (IsFirst()) {
os << "\n  This is the first one: ";
os << i;
os << "\n  ";
} else if (IsLast()) {
os << "\n  This is the last one: ";
os << i;
os << "\n  ";
} else {
os << "\n  This is the middle: ";
os << i;
os << "\n  ";
}
os << "\n  ";
}

os << "\n";

}
std::string LoopLogic(const std::vector<std::string>& v) {
  std::stringstream oss;
  LoopLogic(oss, v);
  return oss.str();
}
void BooleanLogic(std::ostream& os, const std::vector<std::string>& v) {
os << "\n  BooleanLogic:\n  ";


for (size_t td_iter_ = 0; td_iter_ < v.size(); td_iter_++) {
  auto& i = v[td_iter_];
  auto IsFirst = [&]() { return td_iter_ == 0; };
  auto IsLast = [&]() { return td_iter_ == v.size() - 1; };
  auto Index0 = [&](std::ostream& os) { os << std::to_string(td_iter_); };
  auto Index1 = [&](std::ostream& os) { os << std::to_string(td_iter_ + 1); };
os << "\n  ";
os << i;
os << "\n  ";
if (!IsFirst()) {
os << "This is not the first one.";
} else {
}
os << "\n  ";
if (!IsLast()) {
os << "This is not the last one.";
} else {
}
os << "\n  ";
}

os << "\n";

}
std::string BooleanLogic(const std::vector<std::string>& v) {
  std::stringstream oss;
  BooleanLogic(oss, v);
  return oss.str();
}
void TestIsEmpty(std::ostream& os, const std::vector<std::string>& v) {
os << "v is ";
if (!IsEmpty(v)) {
os << " not ";
} else {
}
os << " empty.";

}
std::string TestIsEmpty(const std::vector<std::string>& v) {
  std::stringstream oss;
  TestIsEmpty(oss, v);
  return oss.str();
}
void PrintIndices(std::ostream& os, const std::vector<std::string>& v) {
os << "\n  ";


for (size_t td_iter_ = 0; td_iter_ < v.size(); td_iter_++) {
  auto& i = v[td_iter_];
  auto IsFirst = [&]() { return td_iter_ == 0; };
  auto IsLast = [&]() { return td_iter_ == v.size() - 1; };
  auto Index0 = [&](std::ostream& os) { os << std::to_string(td_iter_); };
  auto Index1 = [&](std::ostream& os) { os << std::to_string(td_iter_ + 1); };
os << "\n  i0: ";
Index0(os);
os << " i1: ";
Index1(os);
os << " \"";
os << i;
os << "\"\n  ";
}

os << "\n  ";
Literal(os);
os << "\n";

}
std::string PrintIndices(const std::vector<std::string>& v) {
  std::stringstream oss;
  PrintIndices(oss, v);
  return oss.str();
}
void Literal(std::ostream& os) {
os << "Hello world from a literal template.";

}
std::string Literal() {
  std::stringstream oss;
  Literal(oss);
  return oss.str();
}
void PrintTheHellos(std::ostream& os, const std::string& a, const std::string& b) {
os << "\nFirst one: ";
os << a;
os << "\nSecond one: ";
os << b;
os << "\n";

}
std::string PrintTheHellos(const std::string& a, const std::string& b) {
  std::stringstream oss;
  PrintTheHellos(oss, a, b);
  return oss.str();
}
void SayHi(std::ostream& os) {
os << "Hello World!";

}
std::string SayHi() {
  std::stringstream oss;
  SayHi(oss);
  return oss.str();
}
void ATemplateThatCallsAnotherWithYetOthersAsArguments(std::ostream& os) {
os << "\n  ";
PrintTheHellos(os, Literal(), SayHi());
os << "\n";

}
std::string ATemplateThatCallsAnotherWithYetOthersAsArguments() {
  std::stringstream oss;
  ATemplateThatCallsAnotherWithYetOthersAsArguments(oss);
  return oss.str();
}

} // namespace template_example

