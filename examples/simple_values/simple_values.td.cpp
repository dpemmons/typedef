
#include "simple_values.td.h"

// Generated by the Typedef compiler (EXPERIMENTAL)

#include "rapidjson/document.h"


namespace {

template <typename T>
inline bool IsEmpty(const td::Vector<T>& v) {
  return v.size() == 0;
}


inline std::string escape_json(const std::string& s) {
  std::ostringstream o;
  for (auto c = s.cbegin(); c != s.cend(); c++) {
    switch (*c) {
      case '"': o << "\\\""; break;
      case '\\': o << "\\\\"; break;
      case '\b': o << "\\b"; break;
      case '\f': o << "\\f"; break;
      case '\n': o << "\\n"; break;
      case '\r': o << "\\r"; break;
      case '\t': o << "\\t"; break;
      default:
        if ('\x00' <= *c && *c <= '\x1f') {
          o << "\\u" << std::hex << std::setw(4) << std::setfill('0')
            << static_cast<int>(*c);
        } else {
          o << *c;
        }
    }
  }
  return o.str();
}

inline std::string char32ToJsonString(char32_t c) {
  std::wstring_convert<std::codecvt_utf8<char32_t>, char32_t> converter;
  std::string utf8 = converter.to_bytes(&c, &c + 1);
  return escape_json(utf8);
}

inline char32_t GetCharValue(std::string_view str) {
  if (str.size() == 2 && str[0] == '\\') {
    switch (str[1]) {
      case 'n':
        return U'\n';
      case 'r':
        return U'\r';
      case 't':
        return U'\t';
      case '\\':
        return U'\\';
      case '0':
        return U'\0';
      case '\'':
        return U'\'';
      case '\"':
        return U'\"';
    }
  }
  if (str.size() == 4 && str[0] == '\\' && str[1] == 'x') {
    // TODO this seems rather inefficient, do something better?
    std::istringstream ss(std::string(str.substr(2)));
    int value;
    ss >> std::hex >> value;
    return static_cast<char32_t>(value);
  }

  if (str.size() >= 3 && str.size() <= 10 && str[0] == '\\' && str[1] == 'u' &&
      str[2] == '{' && str.back() == '}') {
    // TODO this seems rather inefficient, do something better?
    std::istringstream ss(std::string(str.substr(3, str.size() - 4)));
    int value;
    ss >> std::hex >> value;
    return static_cast<char32_t>(value);
  }

  if (str.size() > 0) {
    std::string inner_str(str);
    std::wstring_convert<std::codecvt_utf8<char32_t>, char32_t> converter;
    std::u32string str32 = converter.from_bytes(inner_str);
    if (str32.size() == 1) {
      return str32[0];
    }
  }
  throw std::runtime_error("Invalid char.");
}

// Struct and variant JSON forward declarations

simple_values::StructA JsonParseStructA(const rapidjson::Value& obj);

simple_values::StructB JsonParseStructB(const rapidjson::Value& obj);

simple_values::StructC JsonParseStructC(const rapidjson::Value& obj);

simple_values::VariantA JsonParseVariantA(const rapidjson::Value& obj);

simple_values::VariantB JsonParseVariantB(const rapidjson::Value& obj);

simple_values::StructD JsonParseStructD(const rapidjson::Value& obj);

simple_values::StructE JsonParseStructE(const rapidjson::Value& obj);

simple_values::StructE::VariantE JsonParseStructE_VariantE(const rapidjson::Value& obj);

simple_values::StructE::NestedStruct JsonParseStructE_NestedStruct(const rapidjson::Value& obj);

simple_values::StructE::NestedVariant JsonParseStructE_NestedVariant(const rapidjson::Value& obj);

simple_values::StructE::inlineStructT JsonParseStructE_inlineStructT(const rapidjson::Value& obj);

simple_values::VariantC JsonParseVariantC(const rapidjson::Value& obj);

simple_values::VariantC::NestedStruct JsonParseVariantC_NestedStruct(const rapidjson::Value& obj);

simple_values::VariantC::NestedVariant JsonParseVariantC_NestedVariant(const rapidjson::Value& obj);

simple_values::VariantC::inlineStructT JsonParseVariantC_inlineStructT(const rapidjson::Value& obj);

simple_values::VariantC::VariantFT JsonParseVariantC_VariantFT(const rapidjson::Value& obj);

// Struct and variant JSON definitions

simple_values::StructA JsonParseStructA(const rapidjson::Value& obj) {
  simple_values::StructA ret;
  {
  rapidjson::Value::ConstMemberIterator iter = obj.FindMember("example_bool");
  if (iter != obj.MemberEnd()) {
    auto& val = iter->value;
    
  
  if (val.IsBool()) {
    ret.example_bool() = val.GetBool();
  }

  }
  } {
  rapidjson::Value::ConstMemberIterator iter = obj.FindMember("example_char");
  if (iter != obj.MemberEnd()) {
    auto& val = iter->value;
    
  
  if (val.IsString()) {
    std::string str = val.GetString();
    ret.example_char() = GetCharValue(str);
  }

  }
  } {
  rapidjson::Value::ConstMemberIterator iter = obj.FindMember("example_str");
  if (iter != obj.MemberEnd()) {
    auto& val = iter->value;
    
  
  if (val.IsString()) {
    ret.example_str() = val.GetString();
  }

  }
  } {
  rapidjson::Value::ConstMemberIterator iter = obj.FindMember("example_f32");
  if (iter != obj.MemberEnd()) {
    auto& val = iter->value;
    
  
  if (val.IsDouble()) {
    ret.example_f32() = (float)val.GetDouble();
  }

  }
  } {
  rapidjson::Value::ConstMemberIterator iter = obj.FindMember("example_f64");
  if (iter != obj.MemberEnd()) {
    auto& val = iter->value;
    
  
  if (val.IsDouble()) {
    ret.example_f64() = val.GetDouble();
  }

  }
  } {
  rapidjson::Value::ConstMemberIterator iter = obj.FindMember("example_u8");
  if (iter != obj.MemberEnd()) {
    auto& val = iter->value;
    
  
  if (val.IsUint()) {
    // TODO bounds check.
    ret.example_u8() = val.GetUint();
  }

  }
  } {
  rapidjson::Value::ConstMemberIterator iter = obj.FindMember("example_u16");
  if (iter != obj.MemberEnd()) {
    auto& val = iter->value;
    
  
  if (val.IsUint()) {
    // TODO bounds check.
    ret.example_u16() = val.GetUint();
  }

  }
  } {
  rapidjson::Value::ConstMemberIterator iter = obj.FindMember("example_u32");
  if (iter != obj.MemberEnd()) {
    auto& val = iter->value;
    
  
  if (val.IsUint()) {
    ret.example_u32() = val.GetUint();
  }

  }
  } {
  rapidjson::Value::ConstMemberIterator iter = obj.FindMember("example_u64");
  if (iter != obj.MemberEnd()) {
    auto& val = iter->value;
    
  
  if (val.IsUint64()) {
    ret.example_u64() = val.GetUint64();
  }

  }
  } {
  rapidjson::Value::ConstMemberIterator iter = obj.FindMember("example_i8");
  if (iter != obj.MemberEnd()) {
    auto& val = iter->value;
    
  
  if (val.IsInt()) {
    // TODO bounds check
    ret.example_i8() = val.GetInt();
  }

  }
  } {
  rapidjson::Value::ConstMemberIterator iter = obj.FindMember("example_i16");
  if (iter != obj.MemberEnd()) {
    auto& val = iter->value;
    
  
  if (val.IsInt()) {
    // TODO bounds check
    ret.example_i16() = val.GetInt();
  }

  }
  } {
  rapidjson::Value::ConstMemberIterator iter = obj.FindMember("example_i32");
  if (iter != obj.MemberEnd()) {
    auto& val = iter->value;
    
  
  if (val.IsInt()) {
    ret.example_i32() = val.GetInt();
  }

  }
  } {
  rapidjson::Value::ConstMemberIterator iter = obj.FindMember("example_i64");
  if (iter != obj.MemberEnd()) {
    auto& val = iter->value;
    
  
  if (val.IsInt64()) {
    ret.example_i64() = val.GetInt64();
  }

  }
  } 
  return ret;
}


simple_values::StructB JsonParseStructB(const rapidjson::Value& obj) {
  simple_values::StructB ret;
  {
  rapidjson::Value::ConstMemberIterator iter = obj.FindMember("example_bool");
  if (iter != obj.MemberEnd()) {
    auto& val = iter->value;
    
  
  if (val.IsBool()) {
    ret.example_bool() = val.GetBool();
  }

  }
  } {
  rapidjson::Value::ConstMemberIterator iter = obj.FindMember("example_char");
  if (iter != obj.MemberEnd()) {
    auto& val = iter->value;
    
  
  if (val.IsString()) {
    std::string str = val.GetString();
    ret.example_char() = GetCharValue(str);
  }

  }
  } {
  rapidjson::Value::ConstMemberIterator iter = obj.FindMember("example_str");
  if (iter != obj.MemberEnd()) {
    auto& val = iter->value;
    
  
  if (val.IsString()) {
    ret.example_str() = val.GetString();
  }

  }
  } {
  rapidjson::Value::ConstMemberIterator iter = obj.FindMember("example_f32");
  if (iter != obj.MemberEnd()) {
    auto& val = iter->value;
    
  
  if (val.IsDouble()) {
    ret.example_f32() = (float)val.GetDouble();
  }

  }
  } {
  rapidjson::Value::ConstMemberIterator iter = obj.FindMember("example_f64");
  if (iter != obj.MemberEnd()) {
    auto& val = iter->value;
    
  
  if (val.IsDouble()) {
    ret.example_f64() = val.GetDouble();
  }

  }
  } {
  rapidjson::Value::ConstMemberIterator iter = obj.FindMember("example_u8");
  if (iter != obj.MemberEnd()) {
    auto& val = iter->value;
    
  
  if (val.IsUint()) {
    // TODO bounds check.
    ret.example_u8() = val.GetUint();
  }

  }
  } {
  rapidjson::Value::ConstMemberIterator iter = obj.FindMember("example_u16");
  if (iter != obj.MemberEnd()) {
    auto& val = iter->value;
    
  
  if (val.IsUint()) {
    // TODO bounds check.
    ret.example_u16() = val.GetUint();
  }

  }
  } {
  rapidjson::Value::ConstMemberIterator iter = obj.FindMember("example_u32");
  if (iter != obj.MemberEnd()) {
    auto& val = iter->value;
    
  
  if (val.IsUint()) {
    ret.example_u32() = val.GetUint();
  }

  }
  } {
  rapidjson::Value::ConstMemberIterator iter = obj.FindMember("example_u64");
  if (iter != obj.MemberEnd()) {
    auto& val = iter->value;
    
  
  if (val.IsUint64()) {
    ret.example_u64() = val.GetUint64();
  }

  }
  } {
  rapidjson::Value::ConstMemberIterator iter = obj.FindMember("example_i8");
  if (iter != obj.MemberEnd()) {
    auto& val = iter->value;
    
  
  if (val.IsInt()) {
    // TODO bounds check
    ret.example_i8() = val.GetInt();
  }

  }
  } {
  rapidjson::Value::ConstMemberIterator iter = obj.FindMember("example_i16");
  if (iter != obj.MemberEnd()) {
    auto& val = iter->value;
    
  
  if (val.IsInt()) {
    // TODO bounds check
    ret.example_i16() = val.GetInt();
  }

  }
  } {
  rapidjson::Value::ConstMemberIterator iter = obj.FindMember("example_i32");
  if (iter != obj.MemberEnd()) {
    auto& val = iter->value;
    
  
  if (val.IsInt()) {
    ret.example_i32() = val.GetInt();
  }

  }
  } {
  rapidjson::Value::ConstMemberIterator iter = obj.FindMember("example_i64");
  if (iter != obj.MemberEnd()) {
    auto& val = iter->value;
    
  
  if (val.IsInt64()) {
    ret.example_i64() = val.GetInt64();
  }

  }
  } 
  return ret;
}


simple_values::StructC JsonParseStructC(const rapidjson::Value& obj) {
  simple_values::StructC ret;
  {
  rapidjson::Value::ConstMemberIterator iter = obj.FindMember("asdf");
  if (iter != obj.MemberEnd()) {
    auto& val = iter->value;
    
  
  if (val.IsObject()) {
    ret.asdf() = JsonParseStructA(val.GetObject());
  }

  }
  } {
  rapidjson::Value::ConstMemberIterator iter = obj.FindMember("zxcv");
  if (iter != obj.MemberEnd()) {
    auto& val = iter->value;
    
  
  if (val.IsInt()) {
    ret.zxcv() = val.GetInt();
  }

  }
  } {
  rapidjson::Value::ConstMemberIterator iter = obj.FindMember("jkl");
  if (iter != obj.MemberEnd()) {
    auto& val = iter->value;
    
  
  if (val.IsInt()) {
    ret.jkl() = val.GetInt();
  }

  }
  } 
  return ret;
}


simple_values::VariantA JsonParseVariantA(const rapidjson::Value& obj) {
  simple_values::VariantA ret;
  {
  rapidjson::Value::ConstMemberIterator iter = obj.FindMember("a");
  if (iter != obj.MemberEnd()) {
    auto& val = iter->value;
    
  
  if (val.IsBool()) {
    ret.a() = val.GetBool();
  }

  }
  } {
  rapidjson::Value::ConstMemberIterator iter = obj.FindMember("b");
  if (iter != obj.MemberEnd()) {
    auto& val = iter->value;
    
  
  if (val.IsInt()) {
    // TODO bounds check
    ret.b() = val.GetInt();
  }

  }
  } 
  return ret;
}


simple_values::VariantB JsonParseVariantB(const rapidjson::Value& obj) {
  simple_values::VariantB ret;
  {
  rapidjson::Value::ConstMemberIterator iter = obj.FindMember("a");
  if (iter != obj.MemberEnd()) {
    auto& val = iter->value;
    
  
  if (val.IsBool()) {
    ret.a() = val.GetBool();
  }

  }
  } {
  rapidjson::Value::ConstMemberIterator iter = obj.FindMember("b");
  if (iter != obj.MemberEnd()) {
    auto& val = iter->value;
    
  
  if (val.IsString()) {
    std::string str = val.GetString();
    ret.b() = GetCharValue(str);
  }

  }
  } {
  rapidjson::Value::ConstMemberIterator iter = obj.FindMember("c");
  if (iter != obj.MemberEnd()) {
    auto& val = iter->value;
    
  
  if (val.IsString()) {
    ret.c() = val.GetString();
  }

  }
  } {
  rapidjson::Value::ConstMemberIterator iter = obj.FindMember("d");
  if (iter != obj.MemberEnd()) {
    auto& val = iter->value;
    
  
  if (val.IsUint()) {
    // TODO bounds check.
    ret.d() = val.GetUint();
  }

  }
  } {
  rapidjson::Value::ConstMemberIterator iter = obj.FindMember("e");
  if (iter != obj.MemberEnd()) {
    auto& val = iter->value;
    
  
  if (val.IsUint()) {
    // TODO bounds check.
    ret.e() = val.GetUint();
  }

  }
  } {
  rapidjson::Value::ConstMemberIterator iter = obj.FindMember("f");
  if (iter != obj.MemberEnd()) {
    auto& val = iter->value;
    
  
  if (val.IsUint()) {
    ret.f() = val.GetUint();
  }

  }
  } {
  rapidjson::Value::ConstMemberIterator iter = obj.FindMember("g");
  if (iter != obj.MemberEnd()) {
    auto& val = iter->value;
    
  
  if (val.IsUint64()) {
    ret.g() = val.GetUint64();
  }

  }
  } {
  rapidjson::Value::ConstMemberIterator iter = obj.FindMember("h");
  if (iter != obj.MemberEnd()) {
    auto& val = iter->value;
    
  
  if (val.IsInt()) {
    // TODO bounds check
    ret.h() = val.GetInt();
  }

  }
  } {
  rapidjson::Value::ConstMemberIterator iter = obj.FindMember("i");
  if (iter != obj.MemberEnd()) {
    auto& val = iter->value;
    
  
  if (val.IsInt()) {
    // TODO bounds check
    ret.i() = val.GetInt();
  }

  }
  } {
  rapidjson::Value::ConstMemberIterator iter = obj.FindMember("j");
  if (iter != obj.MemberEnd()) {
    auto& val = iter->value;
    
  
  if (val.IsInt()) {
    ret.j() = val.GetInt();
  }

  }
  } {
  rapidjson::Value::ConstMemberIterator iter = obj.FindMember("k");
  if (iter != obj.MemberEnd()) {
    auto& val = iter->value;
    
  
  if (val.IsInt64()) {
    ret.k() = val.GetInt64();
  }

  }
  } {
  rapidjson::Value::ConstMemberIterator iter = obj.FindMember("sa");
  if (iter != obj.MemberEnd()) {
    auto& val = iter->value;
    
  
  if (val.IsObject()) {
    ret.sa() = JsonParseStructA(val.GetObject());
  }

  }
  } {
  rapidjson::Value::ConstMemberIterator iter = obj.FindMember("sb");
  if (iter != obj.MemberEnd()) {
    auto& val = iter->value;
    
  
  if (val.IsObject()) {
    ret.sb() = JsonParseStructB(val.GetObject());
  }

  }
  } {
  rapidjson::Value::ConstMemberIterator iter = obj.FindMember("sc");
  if (iter != obj.MemberEnd()) {
    auto& val = iter->value;
    
  
  if (val.IsObject()) {
    ret.sc() = JsonParseStructC(val.GetObject());
  }

  }
  } {
  rapidjson::Value::ConstMemberIterator iter = obj.FindMember("va");
  if (iter != obj.MemberEnd()) {
    auto& val = iter->value;
    
  
  if (val.IsArray()) {
    for (const auto& val : val.GetArray()) {
      // What I really think I want here is to call JsonParseValue
      // with an argument that is a computed assignment target.
      // Eg. ret.va() computed from a template function.
//       ret.va().emplace_back(std::move(
//       ));
    }
  }

  }
  } {
  rapidjson::Value::ConstMemberIterator iter = obj.FindMember("vara");
  if (iter != obj.MemberEnd()) {
    auto& val = iter->value;
    
  
  if (val.IsObject()) {
    // TODO validate only one.
    ret.vara() = JsonParseVariantA(val.GetObject());
  }

  }
  } {
  rapidjson::Value::ConstMemberIterator iter = obj.FindMember("mapa");
  if (iter != obj.MemberEnd()) {
    auto& val = iter->value;
    
  
  // TODO map
  

  }
  } 
  return ret;
}


simple_values::StructD JsonParseStructD(const rapidjson::Value& obj) {
  simple_values::StructD ret;
  {
  rapidjson::Value::ConstMemberIterator iter = obj.FindMember("a_struct");
  if (iter != obj.MemberEnd()) {
    auto& val = iter->value;
    
  
  if (val.IsObject()) {
    ret.a_struct() = JsonParseStructA(val.GetObject());
  }

  }
  } {
  rapidjson::Value::ConstMemberIterator iter = obj.FindMember("b_variant");
  if (iter != obj.MemberEnd()) {
    auto& val = iter->value;
    
  
  if (val.IsObject()) {
    // TODO validate only one.
    ret.b_variant() = JsonParseVariantA(val.GetObject());
  }

  }
  } {
  rapidjson::Value::ConstMemberIterator iter = obj.FindMember("c_vec");
  if (iter != obj.MemberEnd()) {
    auto& val = iter->value;
    
  
  if (val.IsArray()) {
    for (const auto& val : val.GetArray()) {
      // What I really think I want here is to call JsonParseValue
      // with an argument that is a computed assignment target.
      // Eg. ret.c_vec() computed from a template function.
//       ret.c_vec().emplace_back(std::move(
//       ));
    }
  }

  }
  } {
  rapidjson::Value::ConstMemberIterator iter = obj.FindMember("d_map");
  if (iter != obj.MemberEnd()) {
    auto& val = iter->value;
    
  
  // TODO map
  

  }
  } 
  return ret;
}


simple_values::StructE JsonParseStructE(const rapidjson::Value& obj) {
  simple_values::StructE ret;
  {
  rapidjson::Value::ConstMemberIterator iter = obj.FindMember("inlineStruct");
  if (iter != obj.MemberEnd()) {
    auto& val = iter->value;
    
  
  if (val.IsObject()) {
    ret.inlineStruct() = JsonParseStructE_inlineStructT(val.GetObject());
  }

  }
  } {
  rapidjson::Value::ConstMemberIterator iter = obj.FindMember("vec_a");
  if (iter != obj.MemberEnd()) {
    auto& val = iter->value;
    
  
  if (val.IsArray()) {
    for (const auto& val : val.GetArray()) {
      // What I really think I want here is to call JsonParseValue
      // with an argument that is a computed assignment target.
      // Eg. ret.vec_a() computed from a template function.
//       ret.vec_a().emplace_back(std::move(
//       ));
    }
  }

  }
  } {
  rapidjson::Value::ConstMemberIterator iter = obj.FindMember("map_a");
  if (iter != obj.MemberEnd()) {
    auto& val = iter->value;
    
  
  // TODO map
  

  }
  } {
  rapidjson::Value::ConstMemberIterator iter = obj.FindMember("nestedStructField");
  if (iter != obj.MemberEnd()) {
    auto& val = iter->value;
    
  
  if (val.IsObject()) {
    ret.nestedStructField() = JsonParseStructE_NestedStruct(val.GetObject());
  }

  }
  } {
  rapidjson::Value::ConstMemberIterator iter = obj.FindMember("nestedVariantField");
  if (iter != obj.MemberEnd()) {
    auto& val = iter->value;
    
  
  if (val.IsObject()) {
    // TODO validate only one.
    ret.nestedVariantField() = JsonParseStructE_NestedVariant(val.GetObject());
  }

  }
  } 
  return ret;
}

simple_values::StructE::VariantE JsonParseStructE_VariantE(const rapidjson::Value& obj) {
  simple_values::StructE::VariantE ret;
  {
  rapidjson::Value::ConstMemberIterator iter = obj.FindMember("va");
  if (iter != obj.MemberEnd()) {
    auto& val = iter->value;
    
  
  if (val.IsInt()) {
    ret.va() = val.GetInt();
  }

  }
  } {
  rapidjson::Value::ConstMemberIterator iter = obj.FindMember("vb");
  if (iter != obj.MemberEnd()) {
    auto& val = iter->value;
    
  
  if (val.IsString()) {
    ret.vb() = val.GetString();
  }

  }
  } 
  return ret;
}


simple_values::StructE::NestedStruct JsonParseStructE_NestedStruct(const rapidjson::Value& obj) {
  simple_values::StructE::NestedStruct ret;
  {
  rapidjson::Value::ConstMemberIterator iter = obj.FindMember("a");
  if (iter != obj.MemberEnd()) {
    auto& val = iter->value;
    
  
  if (val.IsInt()) {
    ret.a() = val.GetInt();
  }

  }
  } 
  return ret;
}


simple_values::StructE::NestedVariant JsonParseStructE_NestedVariant(const rapidjson::Value& obj) {
  simple_values::StructE::NestedVariant ret;
  {
  rapidjson::Value::ConstMemberIterator iter = obj.FindMember("a");
  if (iter != obj.MemberEnd()) {
    auto& val = iter->value;
    
  
  if (val.IsInt64()) {
    ret.a() = val.GetInt64();
  }

  }
  } 
  return ret;
}


simple_values::StructE::inlineStructT JsonParseStructE_inlineStructT(const rapidjson::Value& obj) {
  simple_values::StructE::inlineStructT ret;
  {
  rapidjson::Value::ConstMemberIterator iter = obj.FindMember("a");
  if (iter != obj.MemberEnd()) {
    auto& val = iter->value;
    
  
  if (val.IsInt()) {
    ret.a() = val.GetInt();
  }

  }
  } 
  return ret;
}



simple_values::VariantC JsonParseVariantC(const rapidjson::Value& obj) {
  simple_values::VariantC ret;
  {
  rapidjson::Value::ConstMemberIterator iter = obj.FindMember("inlineStruct");
  if (iter != obj.MemberEnd()) {
    auto& val = iter->value;
    
  
  if (val.IsObject()) {
    ret.inlineStruct() = JsonParseVariantC_inlineStructT(val.GetObject());
  }

  }
  } {
  rapidjson::Value::ConstMemberIterator iter = obj.FindMember("VariantF");
  if (iter != obj.MemberEnd()) {
    auto& val = iter->value;
    
  
  if (val.IsObject()) {
    // TODO validate only one.
    ret.VariantF() = JsonParseVariantC_VariantFT(val.GetObject());
  }

  }
  } {
  rapidjson::Value::ConstMemberIterator iter = obj.FindMember("vec_a");
  if (iter != obj.MemberEnd()) {
    auto& val = iter->value;
    
  
  if (val.IsArray()) {
    for (const auto& val : val.GetArray()) {
      // What I really think I want here is to call JsonParseValue
      // with an argument that is a computed assignment target.
      // Eg. ret.vec_a() computed from a template function.
//       ret.vec_a().emplace_back(std::move(
//       ));
    }
  }

  }
  } {
  rapidjson::Value::ConstMemberIterator iter = obj.FindMember("map_a");
  if (iter != obj.MemberEnd()) {
    auto& val = iter->value;
    
  
  // TODO map
  

  }
  } {
  rapidjson::Value::ConstMemberIterator iter = obj.FindMember("nestedStructField");
  if (iter != obj.MemberEnd()) {
    auto& val = iter->value;
    
  
  if (val.IsObject()) {
    ret.nestedStructField() = JsonParseVariantC_NestedStruct(val.GetObject());
  }

  }
  } {
  rapidjson::Value::ConstMemberIterator iter = obj.FindMember("nestedVariantField");
  if (iter != obj.MemberEnd()) {
    auto& val = iter->value;
    
  
  if (val.IsObject()) {
    // TODO validate only one.
    ret.nestedVariantField() = JsonParseVariantC_NestedVariant(val.GetObject());
  }

  }
  } {
  rapidjson::Value::ConstMemberIterator iter = obj.FindMember("map_b");
  if (iter != obj.MemberEnd()) {
    auto& val = iter->value;
    
  
  // TODO map
  

  }
  } {
  rapidjson::Value::ConstMemberIterator iter = obj.FindMember("vec_b");
  if (iter != obj.MemberEnd()) {
    auto& val = iter->value;
    
  
  if (val.IsArray()) {
    for (const auto& val : val.GetArray()) {
      // What I really think I want here is to call JsonParseValue
      // with an argument that is a computed assignment target.
      // Eg. ret.vec_b() computed from a template function.
//       ret.vec_b().emplace_back(std::move(
//       ));
    }
  }

  }
  } 
  return ret;
}

simple_values::VariantC::NestedStruct JsonParseVariantC_NestedStruct(const rapidjson::Value& obj) {
  simple_values::VariantC::NestedStruct ret;
  {
  rapidjson::Value::ConstMemberIterator iter = obj.FindMember("a");
  if (iter != obj.MemberEnd()) {
    auto& val = iter->value;
    
  
  if (val.IsInt()) {
    ret.a() = val.GetInt();
  }

  }
  } 
  return ret;
}


simple_values::VariantC::NestedVariant JsonParseVariantC_NestedVariant(const rapidjson::Value& obj) {
  simple_values::VariantC::NestedVariant ret;
  {
  rapidjson::Value::ConstMemberIterator iter = obj.FindMember("a");
  if (iter != obj.MemberEnd()) {
    auto& val = iter->value;
    
  
  if (val.IsInt64()) {
    ret.a() = val.GetInt64();
  }

  }
  } 
  return ret;
}


simple_values::VariantC::inlineStructT JsonParseVariantC_inlineStructT(const rapidjson::Value& obj) {
  simple_values::VariantC::inlineStructT ret;
  {
  rapidjson::Value::ConstMemberIterator iter = obj.FindMember("a");
  if (iter != obj.MemberEnd()) {
    auto& val = iter->value;
    
  
  if (val.IsInt()) {
    ret.a() = val.GetInt();
  }

  }
  } 
  return ret;
}


simple_values::VariantC::VariantFT JsonParseVariantC_VariantFT(const rapidjson::Value& obj) {
  simple_values::VariantC::VariantFT ret;
  {
  rapidjson::Value::ConstMemberIterator iter = obj.FindMember("va");
  if (iter != obj.MemberEnd()) {
    auto& val = iter->value;
    
  
  if (val.IsInt()) {
    ret.va() = val.GetInt();
  }

  }
  } {
  rapidjson::Value::ConstMemberIterator iter = obj.FindMember("vb");
  if (iter != obj.MemberEnd()) {
    auto& val = iter->value;
    
  
  if (val.IsString()) {
    ret.vb() = val.GetString();
  }

  }
  } 
  return ret;
}



}

namespace simple_values {

// Struct and variant definitions

// StructA member definitions

// StructB member definitions

// StructC member definitions

// simple_values::VariantA member definitions

// simple_values::VariantB member definitions

// StructD member definitions

// StructE member definitions

// simple_values::VariantC member definitions

// Struct and variant JSON declarations

std::string ToJson(const StructA& from) {
  std::stringstream ss;
  ToJson(ss, from);
  return ss.str();
}
void ToJson(std::ostream& os, const StructA& from) {
  os << "{";
  
os << "\"example_bool\":"; os << (from.example_bool() ? "true" : "false");
os << ",";
os << "\"example_char\":"; os << "\"" << char32ToJsonString(from.example_char()) << "\"";
os << ",";
os << "\"example_str\":"; os << "\"" << escape_json(from.example_str()) << "\"";
os << ",";
os << "\"example_f32\":"; os << from.example_f32();
os << ",";
os << "\"example_f64\":"; os << from.example_f64();
os << ",";
os << "\"example_u8\":"; os << (int)from.example_u8();
os << ",";
os << "\"example_u16\":"; os << from.example_u16();
os << ",";
os << "\"example_u32\":"; os << from.example_u32();
os << ",";
os << "\"example_u64\":"; os << from.example_u64();
os << ",";
os << "\"example_i8\":"; os << (int)from.example_i8();
os << ",";
os << "\"example_i16\":"; os << from.example_i16();
os << ",";
os << "\"example_i32\":"; os << from.example_i32();
os << ",";
os << "\"example_i64\":"; os << from.example_i64();

  os << "}";
}

StructA StructA::FromJson(const std::string& str) {
  rapidjson::Document doc;
  doc.Parse(str.c_str());
  return JsonParseStructA(doc);
}


std::string ToJson(const StructB& from) {
  std::stringstream ss;
  ToJson(ss, from);
  return ss.str();
}
void ToJson(std::ostream& os, const StructB& from) {
  os << "{";
  
os << "\"example_bool\":"; os << (from.example_bool() ? "true" : "false");
os << ",";
os << "\"example_char\":"; os << "\"" << char32ToJsonString(from.example_char()) << "\"";
os << ",";
os << "\"example_str\":"; os << "\"" << escape_json(from.example_str()) << "\"";
os << ",";
os << "\"example_f32\":"; os << from.example_f32();
os << ",";
os << "\"example_f64\":"; os << from.example_f64();
os << ",";
os << "\"example_u8\":"; os << (int)from.example_u8();
os << ",";
os << "\"example_u16\":"; os << from.example_u16();
os << ",";
os << "\"example_u32\":"; os << from.example_u32();
os << ",";
os << "\"example_u64\":"; os << from.example_u64();
os << ",";
os << "\"example_i8\":"; os << (int)from.example_i8();
os << ",";
os << "\"example_i16\":"; os << from.example_i16();
os << ",";
os << "\"example_i32\":"; os << from.example_i32();
os << ",";
os << "\"example_i64\":"; os << from.example_i64();

  os << "}";
}

StructB StructB::FromJson(const std::string& str) {
  rapidjson::Document doc;
  doc.Parse(str.c_str());
  return JsonParseStructB(doc);
}


std::string ToJson(const StructC& from) {
  std::stringstream ss;
  ToJson(ss, from);
  return ss.str();
}
void ToJson(std::ostream& os, const StructC& from) {
  os << "{";
  
if (from.has_asdf()) {os << "\"asdf\":"; ToJson(os, from.asdf());} else {os << "\"asdf\":"; os << "null";}
os << ",";
os << "\"zxcv\":"; os << from.zxcv();
os << ",";
os << "\"jkl\":"; os << from.jkl();

  os << "}";
}

StructC StructC::FromJson(const std::string& str) {
  rapidjson::Document doc;
  doc.Parse(str.c_str());
  return JsonParseStructC(doc);
}


std::string ToJson(const VariantA& from) {
  std::stringstream ss;
  ToJson(ss, from);
  return ss.str();
}
void ToJson(std::ostream& os, const VariantA& from) {
  os << "{";
  
  if (from.is_a()) {
    
os << "\"a\":"; os << (from.a() ? "true" : "false");

  }
  
  if (from.is_b()) {
    
os << "\"b\":"; os << (int)from.b();

  }
  
  os << "}";
}


VariantA VariantA::FromJson(const std::string& str) {
  rapidjson::Document doc;
  doc.Parse(str.c_str());
  return JsonParseVariantA(doc);
}


std::string ToJson(const VariantB& from) {
  std::stringstream ss;
  ToJson(ss, from);
  return ss.str();
}
void ToJson(std::ostream& os, const VariantB& from) {
  os << "{";
  
  if (from.is_a()) {
    
os << "\"a\":"; os << (from.a() ? "true" : "false");

  }
  
  if (from.is_b()) {
    
os << "\"b\":"; os << "\"" << char32ToJsonString(from.b()) << "\"";

  }
  
  if (from.is_c()) {
    
os << "\"c\":"; os << "\"" << escape_json(from.c()) << "\"";

  }
  
  if (from.is_d()) {
    
os << "\"d\":"; os << (int)from.d();

  }
  
  if (from.is_e()) {
    
os << "\"e\":"; os << from.e();

  }
  
  if (from.is_f()) {
    
os << "\"f\":"; os << from.f();

  }
  
  if (from.is_g()) {
    
os << "\"g\":"; os << from.g();

  }
  
  if (from.is_h()) {
    
os << "\"h\":"; os << (int)from.h();

  }
  
  if (from.is_i()) {
    
os << "\"i\":"; os << from.i();

  }
  
  if (from.is_j()) {
    
os << "\"j\":"; os << from.j();

  }
  
  if (from.is_k()) {
    
os << "\"k\":"; os << from.k();

  }
  
  if (from.is_sa()) {
    
if (from.has_sa()) {os << "\"sa\":"; ToJson(os, from.sa());} else {os << "\"sa\":"; os << "null";}

  }
  
  if (from.is_sb()) {
    
if (from.has_sb()) {os << "\"sb\":"; ToJson(os, from.sb());} else {os << "\"sb\":"; os << "null";}

  }
  
  if (from.is_sc()) {
    
if (from.has_sc()) {os << "\"sc\":"; ToJson(os, from.sc());} else {os << "\"sc\":"; os << "null";}

  }
  
  if (from.is_va()) {
    
os << "\"va\":";
{
  auto& arr = from.va();
  
os << "[";
for (size_t ii = 0; ii < arr.size(); ii++) {
  const auto& val = arr[ii];
  os << (int)val;
  if (ii < arr.size() - 1) { os << ","; }
}
os << "]";

}

  }
  
  if (from.is_vara()) {
    
if (from.has_vara()) {os << "\"vara\":"; ToJson(os, from.vara());} else {os << "\"vara\":"; os << "null";}

  }
  
  if (from.is_mapa()) {
    
os << "\"mapa\":";
{
  auto& map = from.mapa();
  
os << "{";
auto iter = map.begin();
while (iter != map.end()) {
  {
  const auto& key = iter->first;
  os << "\"" << std::to_string(key) << "\"";
  }
  os << ":";
  {
  const auto& val = iter->second;
  ToJson(os, val);
  }
  ++iter;
  if (iter != map.end()) { os << ","; }
}
os << "}";

}

  }
  
  os << "}";
}


VariantB VariantB::FromJson(const std::string& str) {
  rapidjson::Document doc;
  doc.Parse(str.c_str());
  return JsonParseVariantB(doc);
}


std::string ToJson(const StructD& from) {
  std::stringstream ss;
  ToJson(ss, from);
  return ss.str();
}
void ToJson(std::ostream& os, const StructD& from) {
  os << "{";
  
if (from.has_a_struct()) {os << "\"a_struct\":"; ToJson(os, from.a_struct());} else {os << "\"a_struct\":"; os << "null";}
os << ",";
if (from.has_b_variant()) {os << "\"b_variant\":"; ToJson(os, from.b_variant());} else {os << "\"b_variant\":"; os << "null";}
os << ",";
os << "\"c_vec\":";
{
  auto& arr = from.c_vec();
  
os << "[";
for (size_t ii = 0; ii < arr.size(); ii++) {
  const auto& val = arr[ii];
  os << (int)val;
  if (ii < arr.size() - 1) { os << ","; }
}
os << "]";

}
os << ",";
os << "\"d_map\":";
{
  auto& map = from.d_map();
  
os << "{";
auto iter = map.begin();
while (iter != map.end()) {
  {
  const auto& key = iter->first;
  os << "\"" << std::to_string(key) << "\"";
  }
  os << ":";
  {
  const auto& val = iter->second;
  ToJson(os, val);
  }
  ++iter;
  if (iter != map.end()) { os << ","; }
}
os << "}";

}

  os << "}";
}

StructD StructD::FromJson(const std::string& str) {
  rapidjson::Document doc;
  doc.Parse(str.c_str());
  return JsonParseStructD(doc);
}


std::string ToJson(const StructE& from) {
  std::stringstream ss;
  ToJson(ss, from);
  return ss.str();
}
void ToJson(std::ostream& os, const StructE& from) {
  os << "{";
  
if (from.has_inlineStruct()) {os << "\"inlineStruct\":"; ToJson(os, from.inlineStruct());} else {os << "\"inlineStruct\":"; os << "null";}
os << ",";
os << "\"vec_a\":";
{
  auto& arr = from.vec_a();
  
os << "[";
for (size_t ii = 0; ii < arr.size(); ii++) {
  const auto& val = arr[ii];
  os << val;
  if (ii < arr.size() - 1) { os << ","; }
}
os << "]";

}
os << ",";
os << "\"map_a\":";
{
  auto& map = from.map_a();
  
os << "{";
auto iter = map.begin();
while (iter != map.end()) {
  {
  const auto& key = iter->first;
  os << "\"" << escape_json(key) << "\"";
  }
  os << ":";
  {
  const auto& val = iter->second;
  ToJson(os, val);
  }
  ++iter;
  if (iter != map.end()) { os << ","; }
}
os << "}";

}
os << ",";
if (from.has_nestedStructField()) {os << "\"nestedStructField\":"; ToJson(os, from.nestedStructField());} else {os << "\"nestedStructField\":"; os << "null";}
os << ",";
if (from.has_nestedVariantField()) {os << "\"nestedVariantField\":"; ToJson(os, from.nestedVariantField());} else {os << "\"nestedVariantField\":"; os << "null";}

  os << "}";
}

StructE StructE::FromJson(const std::string& str) {
  rapidjson::Document doc;
  doc.Parse(str.c_str());
  return JsonParseStructE(doc);
}

std::string ToJson(const StructE::VariantE& from) {
  std::stringstream ss;
  ToJson(ss, from);
  return ss.str();
}
void ToJson(std::ostream& os, const StructE::VariantE& from) {
  os << "{";
  
  if (from.is_va()) {
    
os << "\"va\":"; os << from.va();

  }
  
  if (from.is_vb()) {
    
os << "\"vb\":"; os << "\"" << escape_json(from.vb()) << "\"";

  }
  
  os << "}";
}


StructE::VariantE StructE::VariantE::FromJson(const std::string& str) {
  rapidjson::Document doc;
  doc.Parse(str.c_str());
  return JsonParseStructE_VariantE(doc);
}


std::string ToJson(const StructE::NestedStruct& from) {
  std::stringstream ss;
  ToJson(ss, from);
  return ss.str();
}
void ToJson(std::ostream& os, const StructE::NestedStruct& from) {
  os << "{";
  
os << "\"a\":"; os << from.a();

  os << "}";
}

StructE::NestedStruct StructE::NestedStruct::FromJson(const std::string& str) {
  rapidjson::Document doc;
  doc.Parse(str.c_str());
  return JsonParseStructE_NestedStruct(doc);
}


std::string ToJson(const StructE::NestedVariant& from) {
  std::stringstream ss;
  ToJson(ss, from);
  return ss.str();
}
void ToJson(std::ostream& os, const StructE::NestedVariant& from) {
  os << "{";
  
  if (from.is_a()) {
    
os << "\"a\":"; os << from.a();

  }
  
  os << "}";
}


StructE::NestedVariant StructE::NestedVariant::FromJson(const std::string& str) {
  rapidjson::Document doc;
  doc.Parse(str.c_str());
  return JsonParseStructE_NestedVariant(doc);
}



std::string ToJson(const StructE::inlineStructT& from) {
  std::stringstream ss;
  ToJson(ss, from);
  return ss.str();
}
void ToJson(std::ostream& os, const StructE::inlineStructT& from) {
  os << "{";
  
os << "\"a\":"; os << from.a();

  os << "}";
}

StructE::inlineStructT StructE::inlineStructT::FromJson(const std::string& str) {
  rapidjson::Document doc;
  doc.Parse(str.c_str());
  return JsonParseStructE_inlineStructT(doc);
}


std::string ToJson(const VariantC& from) {
  std::stringstream ss;
  ToJson(ss, from);
  return ss.str();
}
void ToJson(std::ostream& os, const VariantC& from) {
  os << "{";
  
  if (from.is_inlineStruct()) {
    
if (from.has_inlineStruct()) {os << "\"inlineStruct\":"; ToJson(os, from.inlineStruct());} else {os << "\"inlineStruct\":"; os << "null";}

  }
  
  if (from.is_VariantF()) {
    
if (from.has_VariantF()) {os << "\"VariantF\":"; ToJson(os, from.VariantF());} else {os << "\"VariantF\":"; os << "null";}

  }
  
  if (from.is_vec_a()) {
    
os << "\"vec_a\":";
{
  auto& arr = from.vec_a();
  
os << "[";
for (size_t ii = 0; ii < arr.size(); ii++) {
  const auto& val = arr[ii];
  os << val;
  if (ii < arr.size() - 1) { os << ","; }
}
os << "]";

}

  }
  
  if (from.is_map_a()) {
    
os << "\"map_a\":";
{
  auto& map = from.map_a();
  
os << "{";
auto iter = map.begin();
while (iter != map.end()) {
  {
  const auto& key = iter->first;
  os << "\"" << escape_json(key) << "\"";
  }
  os << ":";
  {
  const auto& val = iter->second;
  ToJson(os, val);
  }
  ++iter;
  if (iter != map.end()) { os << ","; }
}
os << "}";

}

  }
  
  if (from.is_nestedStructField()) {
    
if (from.has_nestedStructField()) {os << "\"nestedStructField\":"; ToJson(os, from.nestedStructField());} else {os << "\"nestedStructField\":"; os << "null";}

  }
  
  if (from.is_nestedVariantField()) {
    
if (from.has_nestedVariantField()) {os << "\"nestedVariantField\":"; ToJson(os, from.nestedVariantField());} else {os << "\"nestedVariantField\":"; os << "null";}

  }
  
  if (from.is_map_b()) {
    
os << "\"map_b\":";
{
  auto& map = from.map_b();
  
os << "{";
auto iter = map.begin();
while (iter != map.end()) {
  {
  const auto& key = iter->first;
  os << "\"" << std::to_string(key) << "\"";
  }
  os << ":";
  {
  const auto& val = iter->second;
  ToJson(os, val);
  }
  ++iter;
  if (iter != map.end()) { os << ","; }
}
os << "}";

}

  }
  
  if (from.is_vec_b()) {
    
os << "\"vec_b\":";
{
  auto& arr = from.vec_b();
  
os << "[";
for (size_t ii = 0; ii < arr.size(); ii++) {
  const auto& val = arr[ii];
  os << val;
  if (ii < arr.size() - 1) { os << ","; }
}
os << "]";

}

  }
  
  os << "}";
}


VariantC VariantC::FromJson(const std::string& str) {
  rapidjson::Document doc;
  doc.Parse(str.c_str());
  return JsonParseVariantC(doc);
}

std::string ToJson(const VariantC::NestedStruct& from) {
  std::stringstream ss;
  ToJson(ss, from);
  return ss.str();
}
void ToJson(std::ostream& os, const VariantC::NestedStruct& from) {
  os << "{";
  
os << "\"a\":"; os << from.a();

  os << "}";
}

VariantC::NestedStruct VariantC::NestedStruct::FromJson(const std::string& str) {
  rapidjson::Document doc;
  doc.Parse(str.c_str());
  return JsonParseVariantC_NestedStruct(doc);
}


std::string ToJson(const VariantC::NestedVariant& from) {
  std::stringstream ss;
  ToJson(ss, from);
  return ss.str();
}
void ToJson(std::ostream& os, const VariantC::NestedVariant& from) {
  os << "{";
  
  if (from.is_a()) {
    
os << "\"a\":"; os << from.a();

  }
  
  os << "}";
}


VariantC::NestedVariant VariantC::NestedVariant::FromJson(const std::string& str) {
  rapidjson::Document doc;
  doc.Parse(str.c_str());
  return JsonParseVariantC_NestedVariant(doc);
}



std::string ToJson(const VariantC::inlineStructT& from) {
  std::stringstream ss;
  ToJson(ss, from);
  return ss.str();
}
void ToJson(std::ostream& os, const VariantC::inlineStructT& from) {
  os << "{";
  
os << "\"a\":"; os << from.a();

  os << "}";
}

VariantC::inlineStructT VariantC::inlineStructT::FromJson(const std::string& str) {
  rapidjson::Document doc;
  doc.Parse(str.c_str());
  return JsonParseVariantC_inlineStructT(doc);
}


std::string ToJson(const VariantC::VariantFT& from) {
  std::stringstream ss;
  ToJson(ss, from);
  return ss.str();
}
void ToJson(std::ostream& os, const VariantC::VariantFT& from) {
  os << "{";
  
  if (from.is_va()) {
    
os << "\"va\":"; os << from.va();

  }
  
  if (from.is_vb()) {
    
os << "\"vb\":"; os << "\"" << escape_json(from.vb()) << "\"";

  }
  
  os << "}";
}


VariantC::VariantFT VariantC::VariantFT::FromJson(const std::string& str) {
  rapidjson::Document doc;
  doc.Parse(str.c_str());
  return JsonParseVariantC_VariantFT(doc);
}


// Tmplate function definitions


} // namespace simple_values

