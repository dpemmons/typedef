
#include "json_demo.td.h"

// Generated by the Typedef compiler (EXPERIMENTAL)

namespace {

// Literal.

}

namespace json_demo {
// Struct and variant definitions

// StructA member definitions

// StructB member definitions

// StructC member definitions

// json_demo::VariantA member definitions


// Struct and variant JSON declarations

std::string ToJson(const StructA& from) {
  std::stringstream ss;
  ToJson(ss, from);
  return ss.str();
}
void ToJson(std::ostream& os, const StructA& from) {
  os << "{";
  
os << "\"example_bool\":"; os << (from.example_bool() ? "true" : "false");
os << ",";
os << "\"example_char\":"; os << "\"" << char32ToJsonString(from.example_char()) << "\"";
os << ",";
os << "\"example_str\":"; os << "\"" << escape_json(from.example_str()) << "\"";
os << ",";
os << "\"example_f32\":"; os << from.example_f32();
os << ",";
os << "\"example_f64\":"; os << from.example_f64();
os << ",";
os << "\"example_u8\":"; os << (int)from.example_u8();
os << ",";
os << "\"example_u16\":"; os << from.example_u16();
os << ",";
os << "\"example_u32\":"; os << from.example_u32();
os << ",";
os << "\"example_u64\":"; os << from.example_u64();
os << ",";
os << "\"example_i8\":"; os << (int)from.example_i8();
os << ",";
os << "\"example_i16\":"; os << from.example_i16();
os << ",";
os << "\"example_i32\":"; os << from.example_i32();
os << ",";
os << "\"example_i64\":"; os << from.example_i64();

  os << "}";
}



std::string ToJson(const StructB& from) {
  std::stringstream ss;
  ToJson(ss, from);
  return ss.str();
}
void ToJson(std::ostream& os, const StructB& from) {
  os << "{";
  
os << "\"example_vec_bool\":";
{
  auto& arr = from.example_vec_bool();
  
os << "[";
for (size_t ii = 0; ii < arr.size(); ii++) {
  const auto& val = arr[ii];
  os << (val ? "true" : "false");
  if (ii < arr.size() - 1) { os << ","; }
}
os << "]";

}
os << ",";
os << "\"example_vec_char\":";
{
  auto& arr = from.example_vec_char();
  
os << "[";
for (size_t ii = 0; ii < arr.size(); ii++) {
  const auto& val = arr[ii];
  os << "\"" << char32ToJsonString(val) << "\"";
  if (ii < arr.size() - 1) { os << ","; }
}
os << "]";

}
os << ",";
os << "\"example_vec_str\":";
{
  auto& arr = from.example_vec_str();
  
os << "[";
for (size_t ii = 0; ii < arr.size(); ii++) {
  const auto& val = arr[ii];
  os << "\"" << escape_json(val) << "\"";
  if (ii < arr.size() - 1) { os << ","; }
}
os << "]";

}
os << ",";
os << "\"example_vec_int\":";
{
  auto& arr = from.example_vec_int();
  
os << "[";
for (size_t ii = 0; ii < arr.size(); ii++) {
  const auto& val = arr[ii];
  os << val;
  if (ii < arr.size() - 1) { os << ","; }
}
os << "]";

}
os << ",";
os << "\"example_vec_nested_struct\":";
{
  auto& arr = from.example_vec_nested_struct();
  
os << "[";
for (size_t ii = 0; ii < arr.size(); ii++) {
  const auto& val = arr[ii];
  ToJson(os, val);
  if (ii < arr.size() - 1) { os << ","; }
}
os << "]";

}
os << ",";
os << "\"example_vec_vec_int\":";
{
  auto& arr = from.example_vec_vec_int();
  
os << "[";
for (size_t ii = 0; ii < arr.size(); ii++) {
  const auto& val = arr[ii];
  {
    auto& arr = val;
    
os << "[";
for (size_t ii = 0; ii < arr.size(); ii++) {
  const auto& val = arr[ii];
  os << val;
  if (ii < arr.size() - 1) { os << ","; }
}
os << "]";

  }
  if (ii < arr.size() - 1) { os << ","; }
}
os << "]";

}
os << ",";
os << "\"example_vec_map_str_int\":";
{
  auto& arr = from.example_vec_map_str_int();
  
os << "[";
for (size_t ii = 0; ii < arr.size(); ii++) {
  const auto& val = arr[ii];
  {
    auto& map = val;
    
os << "{";
auto iter = map.begin();
while (iter != map.end()) {
  {
  const auto& key = iter->first;
  os << "\"" << escape_json(key) << "\"";
  }
  os << ":";
  {
  const auto& val = iter->second;
  os << val;
  }
  ++iter;
  if (iter != map.end()) { os << ","; }
}
os << "}";

  }
  if (ii < arr.size() - 1) { os << ","; }
}
os << "]";

}

  os << "}";
}


std::string ToJson(const StructB::NestedStruct& from) {
  std::stringstream ss;
  ToJson(ss, from);
  return ss.str();
}
void ToJson(std::ostream& os, const StructB::NestedStruct& from) {
  os << "{";
  
os << "\"a\":"; os << from.a();

  os << "}";
}




std::string ToJson(const StructC& from) {
  std::stringstream ss;
  ToJson(ss, from);
  return ss.str();
}
void ToJson(std::ostream& os, const StructC& from) {
  os << "{";
  
os << "\"example_map_bool_bool\":";
{
  auto& map = from.example_map_bool_bool();
  
os << "{";
auto iter = map.begin();
while (iter != map.end()) {
  {
  const auto& key = iter->first;
  os << (key ? "\"true\"" : "\"false\"");
  }
  os << ":";
  {
  const auto& val = iter->second;
  os << (val ? "true" : "false");
  }
  ++iter;
  if (iter != map.end()) { os << ","; }
}
os << "}";

}
os << ",";
os << "\"example_map_char_char\":";
{
  auto& map = from.example_map_char_char();
  
os << "{";
auto iter = map.begin();
while (iter != map.end()) {
  {
  const auto& key = iter->first;
  os << "\"" << char32ToJsonString(key) << "\"";
  }
  os << ":";
  {
  const auto& val = iter->second;
  os << "\"" << char32ToJsonString(val) << "\"";
  }
  ++iter;
  if (iter != map.end()) { os << ","; }
}
os << "}";

}
os << ",";
os << "\"example_map_str_str\":";
{
  auto& map = from.example_map_str_str();
  
os << "{";
auto iter = map.begin();
while (iter != map.end()) {
  {
  const auto& key = iter->first;
  os << "\"" << escape_json(key) << "\"";
  }
  os << ":";
  {
  const auto& val = iter->second;
  os << "\"" << escape_json(val) << "\"";
  }
  ++iter;
  if (iter != map.end()) { os << ","; }
}
os << "}";

}
os << ",";
os << "\"example_map_int_int\":";
{
  auto& map = from.example_map_int_int();
  
os << "{";
auto iter = map.begin();
while (iter != map.end()) {
  {
  const auto& key = iter->first;
  os << "\"" << std::to_string(key) << "\"";
  }
  os << ":";
  {
  const auto& val = iter->second;
  os << val;
  }
  ++iter;
  if (iter != map.end()) { os << ","; }
}
os << "}";

}
os << ",";
os << "\"example_map_str_nested_struct\":";
{
  auto& map = from.example_map_str_nested_struct();
  
os << "{";
auto iter = map.begin();
while (iter != map.end()) {
  {
  const auto& key = iter->first;
  os << "\"" << escape_json(key) << "\"";
  }
  os << ":";
  {
  const auto& val = iter->second;
  ToJson(os, val);
  }
  ++iter;
  if (iter != map.end()) { os << ","; }
}
os << "}";

}
os << ",";
os << "\"example_map_str_vec\":";
{
  auto& map = from.example_map_str_vec();
  
os << "{";
auto iter = map.begin();
while (iter != map.end()) {
  {
  const auto& key = iter->first;
  os << "\"" << escape_json(key) << "\"";
  }
  os << ":";
  {
  const auto& val = iter->second;
  {
    auto& arr = val;
    
os << "[";
for (size_t ii = 0; ii < arr.size(); ii++) {
  const auto& val = arr[ii];
  os << val;
  if (ii < arr.size() - 1) { os << ","; }
}
os << "]";

  }
  }
  ++iter;
  if (iter != map.end()) { os << ","; }
}
os << "}";

}
os << ",";
os << "\"example_map_str_map\":";
{
  auto& map = from.example_map_str_map();
  
os << "{";
auto iter = map.begin();
while (iter != map.end()) {
  {
  const auto& key = iter->first;
  os << "\"" << escape_json(key) << "\"";
  }
  os << ":";
  {
  const auto& val = iter->second;
  {
    auto& map = val;
    
os << "{";
auto iter = map.begin();
while (iter != map.end()) {
  {
  const auto& key = iter->first;
  os << "\"" << escape_json(key) << "\"";
  }
  os << ":";
  {
  const auto& val = iter->second;
  os << val;
  }
  ++iter;
  if (iter != map.end()) { os << ","; }
}
os << "}";

  }
  }
  ++iter;
  if (iter != map.end()) { os << ","; }
}
os << "}";

}

  os << "}";
}


std::string ToJson(const StructC::NestedStruct& from) {
  std::stringstream ss;
  ToJson(ss, from);
  return ss.str();
}
void ToJson(std::ostream& os, const StructC::NestedStruct& from) {
  os << "{";
  
os << "\"a\":"; os << from.a();

  os << "}";
}




std::string ToJson(const VariantA& from) {
  std::stringstream ss;
  ToJson(ss, from);
  return ss.str();
}
void ToJson(std::ostream& os, const VariantA& from) {
  os << "{";
  
  if (from.is_example_bool()) {
    
os << "\"example_bool\":"; os << (from.example_bool() ? "true" : "false");

  }
  
  if (from.is_example_char()) {
    
os << "\"example_char\":"; os << "\"" << char32ToJsonString(from.example_char()) << "\"";

  }
  
  if (from.is_example_str()) {
    
os << "\"example_str\":"; os << "\"" << escape_json(from.example_str()) << "\"";

  }
  
  if (from.is_example_f32()) {
    
os << "\"example_f32\":"; os << from.example_f32();

  }
  
  if (from.is_example_f64()) {
    
os << "\"example_f64\":"; os << from.example_f64();

  }
  
  if (from.is_example_u8()) {
    
os << "\"example_u8\":"; os << (int)from.example_u8();

  }
  
  if (from.is_example_u16()) {
    
os << "\"example_u16\":"; os << from.example_u16();

  }
  
  if (from.is_example_u32()) {
    
os << "\"example_u32\":"; os << from.example_u32();

  }
  
  if (from.is_example_u64()) {
    
os << "\"example_u64\":"; os << from.example_u64();

  }
  
  if (from.is_example_i8()) {
    
os << "\"example_i8\":"; os << (int)from.example_i8();

  }
  
  if (from.is_example_i16()) {
    
os << "\"example_i16\":"; os << from.example_i16();

  }
  
  if (from.is_example_i32()) {
    
os << "\"example_i32\":"; os << from.example_i32();

  }
  
  if (from.is_example_i64()) {
    
os << "\"example_i64\":"; os << from.example_i64();

  }
  
  os << "}";
}




// Tmplate function definitions


} // namespace json_demo
